Usage:
	There are two choices of GUI available for use. curses.rb will open the application in the command line using curses. gtk.rb will open the application as a gtk window. Both GUIs share a common interface. There will be three large boxes at the top of the screen. They show the Main Stack, the Command Stack, and the Object Table respectively.
	The Main stack shows the actual stack of the calculator. All numbers are pushed here when entered and the results of the operations are pushed here as well.
	The Command Stack shows all commands the calculator has run. All push operations are recorded here from both number entry and mathematical operation. This is used for the undo function.
	The Object Table shows all variables and their values stored in the calculator

The last section is the input line which is broken up into the input box and the error box below it. The input box is where you enter in commands. The commands can be singular("2") or complicated("2 2 + 4 -"). The parser will break up commands based on spaces so things like "2 2 3 ++" will not work because it will not understand what "++" means. If an error occurs at any time in parsing, the parser stops and will display an error that shows what it had a problem parsing. Anything after the error will /NOT/ be parsed and must be entered again.

Commands:
Basic Arithmetic
	"+": Addition
	"-": Subtraction
	"*": Multiplication
	"/": Division
	"^": Exponentiate(b^a)
Trig:
	All Trig commands have two forms; <command> and <command>d
	The former assumes radians, the latter degrees
	Only the radian forms will be listed, if you need it in degrees, or 
	have degrees, put a "d" on the end
	"sin" : Sine(a)
	"cos" : Cosine(a)
	"tan" : Tangent(a)
	"atan": ArcTangent(a)
	"asin": ArcSine(a)
	"acos": ArcCosine(a)
Stack Operations:
	"c"   : Delete the top element of the stack
	"s"   : Swap the top two elements of the stack
	"d"   : Duplicate the top element of the stack
	"cc"  : Clear the main stack
	"ckck": Clear ALL stacks, including the undo stack
Misc:
	"r" : pop the top element and set the precision to that
	"u" : Undo the last operation
	"q" : Exit

Variables:
	Variables are just a way to store a value in a different way
	If you store a value to a variable, that value is stored in 
	that name. If you use the name of the variable in the interface
	the value will be pushed to the stack. To store a value
	use the ">>" command. The next thing in the command string
	will be used as the name. ex:
		12 2 + >> var1
	would result in a variable named var1 with 14 stored in it
	ex
		var1 12 - 
	would result in 2
Examples:
	I will use these (``) quotes to denote text entered into the program. ">>" denotes what's on the stack
	ex: `12` >> [12] is stating that "12" is entered into the program, and the stack has 12 in it
	ex: `12 13` >> [13, 12] etc
	
	ex Take the sine of a 90Â° angle
	`90 sind` >> [1]

	ex Store a variable on the stack
	`12 >> var` >> [12]
	`var` >> [12, 12]
	`+` >> [24]	

Future:
	Macros: chunks of RPN that reference variables and can be executed later when desired
